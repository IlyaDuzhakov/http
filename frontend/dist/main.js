(()=>{"use strict";class t{constructor(t){this.htmls=[],this.tickets=t}renderTickets(){for(const t of this.tickets){const e=`\n  <div class="ticket" data-id="${t.id}">\n  \n  <div class="ticket-body">\n  <input type="checkbox" class="ticket-status" ${t.status?"checked":""}>\n  <span class="ticket-title">${t.name}</span>\n  </div>\n  <span class="ticket-date">${new Date(t.created).toLocaleString()}</span>\n  <div class="ticket-description" style="display: none;">${t.description}</div>\n    \n\n  <div class="ticket-actions">\n    <button class="btn btn-edit">✎</button>\n    <button class="btn btn-delete">×</button>\n  </div>\n</div>\n\n`;this.htmls.push(e)}return this.htmls.join("")}}class e{constructor({title:t="Новый тикет",defaultName:e="",defaultDescription:n="",onSubmit:s}){this.title=t,this.defaultName=e,this.defaultDescription=n,this.onSubmit=s}render(){this.modal=document.createElement("div"),this.modal.classList.add("modal-overlay"),this.modal.innerHTML=`\n      <div class="modal">\n        <h2 class="modal-title">${this.title}</h2>\n        <form class="modal-form">\n          <label>\n            Краткое описание\n            <input type="text" name="name" required>\n          </label>\n          <label>\n            Подробное описание\n            <textarea name="description"></textarea>\n          </label>\n          <div class="modal-buttons">\n            <button type="button" class="btn-cancel">Отмена</button>\n            <button type="submit" class="btn-ok">Ок</button>\n          </div>\n        </form>\n      </div>\n    `,document.body.append(this.modal);const t=this.modal.querySelector('input[name="name"]'),e=this.modal.querySelector('textarea[name="description"]');t.value=this.defaultName,e.value=this.defaultDescription,this.modal.querySelector(".btn-cancel").addEventListener("click",()=>this.close()),this.modal.querySelector(".modal-form").addEventListener("submit",n=>{n.preventDefault();const s=t.value.trim(),i=e.value.trim();this.onSubmit(s,i),this.close()})}close(){this.modal.remove()}}class n{constructor({onConfirm:t,onCancel:e}){this.onConfirm=t,this.onCancel=e}render(){this.modal=document.createElement("div"),this.modal.classList.add("modal-overlay"),this.modal.innerHTML='\n      <div class="modal">\n        <p class="modal-text">Удалить тикет?</p>\n        <div class="modal-buttons">\n          <button class="btn-cancel">Отмена</button>\n          <button class="btn-ok">Удалить</button>\n        </div>\n      </div>\n    ',document.body.appendChild(this.modal),this.modal.querySelector(".btn-cancel").addEventListener("click",()=>{this.close(),this.onCancel&&this.onCancel()}),this.modal.querySelector(".btn-ok").addEventListener("click",()=>{this.close(),this.onConfirm&&this.onConfirm()})}close(){this.modal.remove()}}const s=document.getElementById("root"),i=new class{list(t){fetch("http://localhost:7070/?method=allTickets",{method:"GET"}).then(t=>t.json()).then(e=>{t(e)}).catch(t=>{console.error("Ошибка загрузки тикетов:",t)})}get(t,e){fetch(`http://localhost:7070/?method=ticketById&id=${t}`,{method:"GET"}).then(t=>{if(!t.ok)throw new Error("Ошибка получения тикета");return t.json()}).then(t=>{e(t)}).catch(t=>{console.error("Ошибка при получении тикета:",t)})}create(t,e){const n=new XMLHttpRequest;n.open("POST","http://localhost:7070/?method=createTicket"),n.setRequestHeader("Content-Type","application/json"),n.addEventListener("load",()=>{if(n.status>=200&&n.status<300)try{const t=JSON.parse(n.responseText);e(t)}catch(t){console.error("Ошибка парсинга ответа:",t)}else console.error("Ошибка при создании тикета:",n.status)}),n.send(JSON.stringify(t))}update(t,e,n){fetch(`http://localhost:7070/?method=updateById&id=${t}`,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(t=>{if(!t.ok)throw new Error("Ошибка при обновлении тикета");return t.json()}).then(t=>{n&&n(t)}).catch(t=>{console.error("Ошибка при обновлении:",t)})}delete(t,e){fetch(`http://localhost:7070?method=deleteById&id=${t}`,{method:"GET"}).then(t=>{if(!t.ok)throw new Error("Ошибка удаления");return t.text()}).then(()=>{e()}).catch(t=>console.error("Ошибка при удалении тикета:",t))}},o=new class{constructor(t,e){if(!(t instanceof HTMLElement))throw new Error("This is not HTML element!");this.container=t,this.ticketService=e}init(){this.loadTickets()}loadTickets(){this.ticketService.list(s=>{const i=new t(s).renderTickets();this.container.innerHTML=i,this.renderAddButton();this.container.querySelectorAll(".ticket-title").forEach(t=>{t.addEventListener("click",()=>{const e=t.closest(".ticket"),n=e.dataset.id,s=e.querySelector(".ticket-description");s?s.remove():this.ticketService.get(n,e=>{const n=document.createElement("div");n.classList.add("ticket-description"),n.textContent=e.description,t.insertAdjacentElement("afterend",n)})})});this.container.querySelectorAll(".btn-delete").forEach(t=>{t.addEventListener("click",t=>{const e=t.currentTarget.closest(".ticket").dataset.id;new n({onConfirm:()=>{this.ticketService.delete(e,()=>{this.loadTickets()})},onCancel:()=>{}}).render()})});this.container.querySelectorAll(".btn-edit").forEach(t=>{t.addEventListener("click",()=>{const n=t.closest(".ticket").dataset.id;this.ticketService.get(n,t=>{const s=new e({title:"Редактировать тикет",defaultName:t.name,defaultDescription:t.description,onSubmit:(t,e)=>{this.ticketService.update(n,{name:t,description:e},()=>{s.close(),this.loadTickets()})}});s.render()})})})})}renderAddButton(){const t=document.createElement("button");t.textContent="Добавить тикет",t.classList.add("btn-add"),t.addEventListener("click",()=>{const t=new e({title:"Добавить тикет",onSubmit:(e,n)=>{this.ticketService.create({name:e,description:n,status:!1},()=>{t.close(),this.loadTickets()})}});t.render()}),this.container.prepend(t)}}(s,i);o.init()})();